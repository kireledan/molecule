{% raw -%}
---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: False
  no_log: no
  vars:
    molecule_file: "{{ lookup('env', 'MOLECULE_FILE') }}"
    molecule_instance_config: "{{ lookup('env', 'MOLECULE_INSTANCE_CONFIG') }}"
    molecule_ephemeral_directory: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}"
    molecule_yml: "{{ lookup('file', molecule_file) | from_yaml }}"
  tasks:
    - name: Get public key
      shell: 'cat ~/.ssh/id_rsa.pub'
      register: key
    - name: Launch KVM
      include_role:
        name: kireledan.libvirt
      vars:
        state: create
        libvirt_images_path: "{{molecule_ephemeral_directory}}"
        pubkey: "{{key.stdout}}"
        libvirt_domain:
          # basic arguments
          groups: ['molecule'] # names of Ansible nodes/groups used to provision the domain
          name: "{{plat.name}}" # name/uuid of the domain (empty means new uuid)
          title: 'Molecule' # title of the vm
          image_url: "{{plat.img}}"
          vm:
            memory: "{{plat.memory}}" # RAM memory available to the VM
            vcpu: "{{plat.vcpu}}" # number of cores designated to the VM
            disk_size: "{{plat.disk_size}}" # use this to change first disk size
      register: kvms
      with_items: "{{ molecule_yml.platforms }}"
      loop_control:
        loop_var: plat

    - debug: var=kvms

    - shell: >
        virsh net-dhcp-leases {{item.network}}
        | grep "{{item.name}} "
        | awk '{match($0,/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/); ip = substr($0,RSTART,RLENGTH); print ip}'
      with_items: "{{ molecule_yml.platforms }}"
      register: ip_results

    - set_fact:
        instance_conf_dict: {
          instance: "{{item.item.name}}",
          address: "{{item.stdout}}",
          port: '22',
          user: ubuntu}
      with_items: "{{ip_results.results}}"
      register: instance_config_dict

    - name: Convert instance config dict to a list
      set_fact: instance_conf_dict="{{instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: Dump instance config
      copy:
        # NOTE(retr0h): Workaround for Ansible 2.2.
        #               https://github.com/ansible/ansible/issues/20885
        content: "{{ instance_conf_dict | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
{%- endraw %}
